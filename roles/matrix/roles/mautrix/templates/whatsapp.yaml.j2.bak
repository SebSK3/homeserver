homeserver:
    address: https://matrix.{{ host }}
    domain: {{ host }}
    software: standard
    status_endpoint: null
    message_send_checkpoint_endpoint: null
    async_media: false
    websocket: false
    ping_interval_seconds: 0

appservice:
    address: http://localhost:29318

    hostname: 0.0.0.0
    port: 29318

    database:
        type: sqlite3-fk-wal
        uri: file:///data/whatsapp.db?_txlock=immediate
        max_open_conns: 20
        max_idle_conns: 2
        max_conn_idle_time: null
        max_conn_lifetime: null

    id: whatsapp
    bot:
        username: whatsappbot
        displayname: WhatsApp bridge bot
        avatar: mxc://maunium.net/NeXNQarUbrlYBiPCpprYsRqr
    ephemeral_events: true
    async_transactions: false
    as_token: "This value is generated when generating the registration"
    hs_token: "This value is generated when generating the registration"

analytics:
    # Hostname of the tracking server. The path is hardcoded to /v1/track
    host: api.segment.io
    # API key to send with tracking requests. Tracking is disabled if this is null.
    token: null
    # Optional user ID for tracking events. If null, defaults to using Matrix user ID.
    user_id: null

# Prometheus config.
metrics:
    # Enable prometheus metrics?
    enabled: false
    # IP and port where the metrics listener should be. The path is always /metrics
    listen: 127.0.0.1:8001

whatsapp:
    os_name: Mautrix-WhatsApp bridge
    browser_name: unknown

bridge:
    username_template: whatsapp_{{ '{{.}}' }}
    displayname_template: "{% raw %}{{or .BusinessName .PushName .JID}}{% endraw %} (WA)"
    personal_filtering_spaces: false
    delivery_receipts: false
    message_status_events: false
    message_error_notices: true
    call_start_notices: true
    identity_change_notices: false
    portal_message_buffer: 128
    history_sync:
        backfill: true
        max_initial_conversations: -1
        message_count: 50
        request_full_sync: false
        full_sync_config:
            days_limit: null
            size_mb_limit: null
            storage_quota_mb: null
        unread_hours_threshold: 0
        media_requests:
            auto_request_media: true
            request_method: immediate
            request_local_time: 120
        immediate:
            worker_count: 1
            max_events: 10
        deferred:
            - start_days_ago: 7
              max_batch_events: 20
              batch_delay: 5
            - start_days_ago: 30
              max_batch_events: 50
              batch_delay: 10
            - start_days_ago: 90
              max_batch_events: 100
              batch_delay: 10
            - start_days_ago: -1
              max_batch_events: 500
              batch_delay: 10
    user_avatar_sync: true
    bridge_matrix_leave: true
    sync_direct_chat_list: false
    sync_manual_marked_unread: true
    default_bridge_presence: true
    send_presence_on_typing: false
    force_active_delivery_receipts: false
    double_puppet_server_map:
        {{ host }}: https://matrix.{{ host }}
    double_puppet_allow_discovery: false
    login_shared_secret_map:
        {{ host }}: "as_token:{{ double_puppet_token }}"
    private_chat_portal_meta: default
    parallel_member_sync: false
    bridge_notices: true
    resend_bridge_info: false
    mute_bridging: true
    archive_tag: null
    pinned_tag: null
    tag_only_on_create: true
    enable_status_broadcast: true
    disable_status_broadcast_send: true
    mute_status_broadcast: true
    status_broadcast_tag: m.lowpriority
    whatsapp_thumbnail: false
    allow_user_invite: false
    federate_rooms: true
    disable_bridge_alerts: false
    crash_on_stream_replaced: false
    url_previews: false
    caption_in_message: false
    beeper_galleries: false
    # Should polls be sent using MSC3381 event types?
    extev_polls: false
    # Should cross-chat replies from WhatsApp be bridged? Most servers and clients don't support this.
    cross_room_replies: false
    # Disable generating reply fallbacks? Some extremely bad clients still rely on them,
    # but they're being phased out and will be completely removed in the future.
    disable_reply_fallbacks: false
    # Maximum time for handling Matrix events. Duration strings formatted for https://pkg.go.dev/time#ParseDuration
    # Null means there's no enforced timeout.
    message_handling_timeout:
        # Send an error message after this timeout, but keep waiting for the response until the deadline.
        # This is counted from the origin_server_ts, so the warning time is consistent regardless of the source of delay.
        # If the message is older than this when it reaches the bridge, the message won't be handled at all.
        error_after: null
        # Drop messages after this timeout. They may still go through if the message got sent to the servers.
        # This is counted from the time the bridge starts handling the message.
        deadline: 120s

    # The prefix for commands. Only required in non-management rooms.
    command_prefix: "!wa"

    # Messages sent upon joining a management room.
    # Markdown is supported. The defaults are listed below.
    management_room_text:
        # Sent when joining a room.
        welcome: "Hello, I'm a WhatsApp bridge bot."
        # Sent when joining a management room and the user is already logged in.
        welcome_connected: "Use `help` for help."
        # Sent when joining a management room and the user is not logged in.
        welcome_unconnected: "Use `help` for help or `login` to log in."
        # Optional extra text sent when joining a management room.
        additional_help: ""

    # End-to-bridge encryption support options.
    #
    # See https://docs.mau.fi/bridges/general/end-to-bridge-encryption.html for more info.
    encryption:
        # Allow encryption, work in group chat rooms with e2ee enabled
        allow: true
        # Default to encryption, force-enable encryption in all portals the bridge creates
        # This will cause the bridge bot to be in private chats for the encryption to work properly.
        default: true
        # Whether to use MSC2409/MSC3202 instead of /sync long polling for receiving encryption-related data.
        appservice: false
        # Require encryption, drop any unencrypted messages.
        require: false
        # Enable key sharing? If enabled, key requests for rooms where users are in will be fulfilled.
        # You must use a client that supports requesting keys from other users to use this feature.
        allow_key_sharing: false
        # Should users mentions be in the event wire content to enable the server to send push notifications?
        plaintext_mentions: false
        # Options for deleting megolm sessions from the bridge.
        delete_keys:
            # Beeper-specific: delete outbound sessions when hungryserv confirms
            # that the user has uploaded the key to key backup.
            delete_outbound_on_ack: false
            # Don't store outbound sessions in the inbound table.
            dont_store_outbound: false
            # Ratchet megolm sessions forward after decrypting messages.
            ratchet_on_decrypt: false
            # Delete fully used keys (index >= max_messages) after decrypting messages.
            delete_fully_used_on_decrypt: false
            # Delete previous megolm sessions from same device when receiving a new one.
            delete_prev_on_new_session: false
            # Delete megolm sessions received from a device when the device is deleted.
            delete_on_device_delete: false
            # Periodically delete megolm sessions when 2x max_age has passed since receiving the session.
            periodically_delete_expired: false
            # Delete inbound megolm sessions that don't have the received_at field used for
            # automatic ratcheting and expired session deletion. This is meant as a migration
            # to delete old keys prior to the bridge update.
            delete_outdated_inbound: false
        # What level of device verification should be required from users?
        #
        # Valid levels:
        #   unverified - Send keys to all device in the room.
        #   cross-signed-untrusted - Require valid cross-signing, but trust all cross-signing keys.
        #   cross-signed-tofu - Require valid cross-signing, trust cross-signing keys on first use (and reject changes).
        #   cross-signed-verified - Require valid cross-signing, plus a valid user signature from the bridge bot.
        #                           Note that creating user signatures from the bridge bot is not currently possible.
        #   verified - Require manual per-device verification
        #              (currently only possible by modifying the `trust` column in the `crypto_device` database table).
        verification_levels:
            # Minimum level for which the bridge should send keys to when bridging messages from WhatsApp to Matrix.
            receive: unverified
            # Minimum level that the bridge should accept for incoming Matrix messages.
            send: unverified
            # Minimum level that the bridge should require for accepting key requests.
            share: cross-signed-tofu
        # Options for Megolm room key rotation. These options allow you to
        # configure the m.room.encryption event content. See:
        # https://spec.matrix.org/v1.3/client-server-api/#mroomencryption for
        # more information about that event.
        rotation:
            # Enable custom Megolm room key rotation settings. Note that these
            # settings will only apply to rooms created after this option is
            # set.
            enable_custom: false
            # The maximum number of milliseconds a session should be used
            # before changing it. The Matrix spec recommends 604800000 (a week)
            # as the default.
            milliseconds: 604800000
            # The maximum number of messages that should be sent with a given a
            # session before changing it. The Matrix spec recommends 100 as the
            # default.
            messages: 100

            # Disable rotating keys when a user's devices change?
            # You should not enable this option unless you understand all the implications.
            disable_device_change_key_rotation: false

    # Settings for provisioning API
    provisioning:
        # Prefix for the provisioning API paths.
        prefix: /_matrix/provision
        # Shared secret for authentication. If set to "generate", a random secret will be generated,
        # or if set to "disable", the provisioning API will be disabled.
        shared_secret: generate
        # Enable debug API at /debug with provisioning authentication.
        debug_endpoints: false

    # Permissions for using the bridge.
    # Permitted values:
    #    relay - Talk through the relaybot (if enabled), no access otherwise
    #     user - Access to use the bridge to chat with a WhatsApp account.
    #    admin - User level and some additional administration tools
    # Permitted keys:
    #        * - All Matrix users
    #   domain - All users on that homeserver
    #     mxid - Specific user
    permissions:
        "*": relay
        "{{ host }}": user
        "@sebsk:{{ host }}": admin

    # Settings for relay mode
    relay:
        # Whether relay mode should be allowed. If allowed, `!wa set-relay` can be used to turn any
        # authenticated user into a relaybot for that chat.
        enabled: false
        # Should only admins be allowed to set themselves as relay users?
        admin_only: true
        # The formats to use when sending messages to WhatsApp via the relaybot.
{% raw %}
        message_formats:
            m.text: "<b>{{ .Sender.Displayname }}</b>: {{ .Message }}"
            m.notice: "<b>{{ .Sender.Displayname }}</b>: {{ .Message }}"
            m.emote: "* <b>{{ .Sender.Displayname }}</b> {{ .Message }}"
            m.file: "<b>{{ .Sender.Displayname }}</b> sent a file"
            m.image: "<b>{{ .Sender.Displayname }}</b> sent an image"
            m.audio: "<b>{{ .Sender.Displayname }}</b> sent an audio file"
            m.video: "<b>{{ .Sender.Displayname }}</b> sent a video"
            m.location: "<b>{{ .Sender.Displayname }}</b> sent a location"
{% endraw %}
# Logging config. See https://github.com/tulir/zeroconfig for details.
logging:
    min_level: debug
    writers:
    - type: stdout
      format: pretty-colored
    - type: file
      format: json
      filename: ./logs/mautrix-whatsapp.log
      max_size: 100
      max_backups: 10
      compress: true
